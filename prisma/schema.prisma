// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean? @default(false)
  image         String?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reviews       Review[]
}

// ....................................Mentor.................................
model Mentor {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  emailVerified   Boolean?         @default(false)
  image           String?
  password        String?
  location        String?
  designation     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  contentLibrarys ContentLibrary[]
  reviews         Review[]
  availability    Availability?
  bio             Bio?
  servicesId      String?
  services        Service[]       @relation("MentorServices")
  createdServices Service[]       @relation("MentorCreatedServices")
}

model ContentLibrary {
  id          String   @id @default(cuid())
  title       String
  description String
  video       String
  thumbnail   String
  mentor      Mentor   @relation(fields: [mentorId], references: [id])
  status      Status   @default(Pending)
  rejected    String?
  mentorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  message   String
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id        String   @id @default(cuid())
  days      Day[]
  startTime DateTime // represent the starting time of availability
  endTime   DateTime // represent the ending time of availability
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bio {
  id        String   @id @default(cuid())
  bio       String
  status    Status   @default(Pending)
  rejected  String?
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ....................................Admin.................................
model Admin {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified Boolean?   @default(false)
  image         String?
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  services      Service[]
}

// .................. Services .......................................

model Service {
  id              String   @id @default(cuid())
  name            String
  price           BigInt
  description     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  admin           Admin?   @relation(fields: [adminId], references: [id])
  adminId         String?
  mentors         Mentor[] @relation("MentorServices")
  creator         Mentor?  @relation("MentorCreatedServices", fields: [creatorId], references: [id])
  creatorId       String?
  status          Status   @default(Pending)
  rejectionReason String?
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum Status {
  Accepted
  Rejected
  Pending
}
